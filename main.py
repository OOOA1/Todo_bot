import requests
import time
from db import get_connection
from db import create_tasks_table, add_task, update_task_status, get_all_tasks, get_tasks_by_status, get_task_by_message_id

TOKEN = '7752152586:AAHhH9iNwhEgdwlCn9jwFrUeJZ0eszuSOIo'
URL = f'https://api.telegram.org/bot{TOKEN}'

offset = 0
user_states = {}
user_task_data = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
create_tasks_table()

while True:
    response = requests.get(f'{URL}/getUpdates', params={'timeout': 100, 'offset': offset})
    data = response.json()

    if data['ok']:
        for update in data['result']:
            offset = update['update_id'] + 1

            message = update.get('message')
            callback = update.get('callback_query')

            if message:
                chat_id = message['chat']['id']
                thread_id = message.get('message_thread_id')
                user_id = message['from']['id']
                user_name = message['from'].get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
                text = message.get('text', '')

                if user_id in user_states:
                    state = user_states[user_id]

                    if state == 'waiting_for_text':
                        user_task_data[user_id] = {'text': text, 'author': user_name}
                        task = user_task_data[user_id]

                        payload = {
                            'chat_id': chat_id,
                            'text': f"**–ó–∞–¥–∞—á–∞:**\n{task['text']}\n"
                                    f"**–ü–æ—Å—Ç–∞–≤–∏–ª:** {task['author']}\n"
                                    f"**–°—Ç–∞—Ç—É—Å:** ‚ùóÔ∏è–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ",
                            'parse_mode': 'Markdown',
                            'reply_markup': {
                                'inline_keyboard': [
                                    [{'text': '–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É', 'callback_data': 'in_progress'}],
                                    [{'text': '–í—ã–ø–æ–ª–Ω–µ–Ω–æ',       'callback_data': 'completed'}]
                                ]
                            }
                        }
                        if thread_id is not None:
                            payload['message_thread_id'] = thread_id

                        send_resp = requests.post(f'{URL}/sendMessage', json=payload)

                        message_id = send_resp.json()['result']['message_id']
                        add_task(chat_id, thread_id, message_id, task['author'], task['text'], '–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ')

                        user_states.pop(user_id)
                        user_task_data.pop(user_id)

                elif text == '/newtask':
                    user_states[user_id] = 'waiting_for_text'
                    payload = {
                        'chat_id': chat_id,
                        'text': '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:'
                    }

                    if thread_id is not None:
                        payload['message_thread_id'] = thread_id
                    requests.post(f'{URL}/sendMessage', json=payload)

                elif text == '/task':
                    thread_id = message.get('message_thread_id')
                    task_ids = get_all_tasks(chat_id, thread_id)
                    if not task_ids:
                        payload = {
                            'chat_id': chat_id,
                            'text': '–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —ç—Ç–æ–π —Ç–µ–º–µ.'
                        }

                        if thread_id is not None:
                            payload['message_thread_id'] = thread_id
                        requests.post(f'{URL}/sendMessage', json=payload)
                    else:
                        for msg_id in task_ids:
                            fwd_payload = {
                                'chat_id': chat_id,
                                'from_chat_id': chat_id,
                                'message_id': msg_id
                            }
                            if thread_id is not None:
                                fwd_payload['message_thread_id'] = thread_id

                            requests.post(f'{URL}/forwardMessage', json=fwd_payload)

                elif text == '/filter':
                    payload = {
                        'chat_id': chat_id,
                        'text': '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á:',
                        'reply_markup': {
                            'inline_keyboard': [
                                [{'text': '–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ',    'callback_data': 'status_–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'}],
                                [{'text': '–í–∑—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É',  'callback_data': 'status_–≤–∑—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É'}],
                                [{'text': '–í—ã–ø–æ–ª–Ω–µ–Ω–æ',       'callback_data': 'status_–≤—ã–ø–æ–ª–Ω–µ–Ω–æ'}]
                            ]
                        }
                    }
                    if thread_id is not None:
                        payload['message_thread_id'] = thread_id
                    requests.post(f'{URL}/sendMessage', json=payload)

            elif callback: # –û–¥–∏–Ω–æ—á–Ω—ã–π –±–ª–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback
                chat_id = callback['message']['chat']['id']
                callback_message_id = callback['message']['message_id']  # ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π
                thread_id = callback['message'].get('message_thread_id')
                data_callback = callback['data']

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É
                if data_callback.startswith('status_'):
                    status = data_callback.split('_')[1]
                    tasks = get_tasks_by_status(chat_id, thread_id, status)

                    if tasks:
                        task_buttons = []
                        for task_id in tasks:
                            task = get_task_by_message_id(chat_id, task_id)
                            if task:
                                task_text_short = task[1][:20] + '...' if len(task[1]) > 20 else task[1]
                                task_buttons.append([{
                                    'text': f'üìå {task_text_short}', 
                                    'callback_data': f'task_{task_id}_{status}'
                                }])

                        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                        requests.post(f'{URL}/editMessageText', json={
                            'chat_id': chat_id,
                            'message_id': callback_message_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π
                            'text': f'üìã –ó–∞–¥–∞—á–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "{status}":',
                            'reply_markup': {
                                'inline_keyboard': [
                                    *task_buttons,
                                    [{'text': '‚óÄÔ∏è –ù–∞–∑–∞–¥', 'callback_data': 'back_to_status'}]
                                ]
                            }
                        })
                    else:
                        requests.post(f'{URL}/editMessageText', json={
                            'chat_id': chat_id,
                            'message_id': callback_message_id,
                            'text': f'‚ùå –ó–∞–¥–∞—á–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "{status}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
                            'reply_markup': {
                                'inline_keyboard': [
                                    [{'text': '‚óÄÔ∏è –ù–∞–∑–∞–¥', 'callback_data': 'back_to_status'}]
                                ]
                            }
                        })

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–∏
                elif data_callback.startswith('task_'):
                    task_id = int(data_callback.split('_')[1])
                    status = data_callback.split('_')[2]
                    task = get_task_by_message_id(chat_id, task_id)
                    
                    if task:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–ø–ª–∞–µ–º
                        requests.post(f'{URL}/sendMessage', json={
                            'chat_id': chat_id,
                            'text': f'üîç –í—ã–±—Ä–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞:\n\n{task[1]}\n\n–°—Ç–∞—Ç—É—Å: {status}',
                            'reply_to_message_id': task_id,  # –†–µ–ø–ª–∞–π –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
                            'reply_markup': {
                                'inline_keyboard': [
                                    [{'text': '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', 'callback_data': f'status_{status}'}]
                                ]
                            }
                        })
                    else:
                        requests.post(f'{URL}/sendMessage', json={
                            'chat_id': chat_id,
                            'text': '‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
                        })

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
                elif data_callback == 'back_to_status':
                    requests.post(f'{URL}/editMessageText', json={
                        'chat_id': chat_id,
                        'message_id': callback_message_id,
                        'text': '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á:',
                        'reply_markup': {
                            'inline_keyboard': [
                                [{'text': '–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ', 'callback_data': 'status_–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'}],
                                [{'text': '–í–∑—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É', 'callback_data': 'status_–≤–∑—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É'}],
                                [{'text': '–í—ã–ø–æ–ª–Ω–µ–Ω–æ', 'callback_data': 'status_–≤—ã–ø–æ–ª–Ω–µ–Ω–æ'}]
                            ]
                        }
                    })

                elif data_callback == 'in_progress':
                    message_id = callback['message']['message_id']
                    new_text = callback['message']['text'].replace('–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ', '–í–∑—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É ‚úÖ')
                    requests.post(f'{URL}/editMessageText', json={
                        'chat_id': chat_id,
                        'message_id': message_id,
                        'text': new_text,
                        'parse_mode': 'Markdown',
                        'reply_markup': {
                            'inline_keyboard': [
                                [{'text': '–í—ã–ø–æ–ª–Ω–µ–Ω–æ', 'callback_data': 'completed'}]
                            ]
                        }
                    })
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    update_task_status(chat_id, message_id, '–≤–∑—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É')
                    requests.post(f'{URL}/answerCallbackQuery', json={'callback_query_id': callback['id']})

                elif data_callback == 'completed':
                    message_id = callback['message']['message_id']
                    new_text = callback['message']['text']
                    new_text = new_text.replace('–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ', '–í—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ').replace('–í–∑—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É ‚úÖ', '–í—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ')
                    requests.post(f'{URL}/editMessageText', json={
                        'chat_id': chat_id,
                        'message_id': message_id,
                        'text': new_text,
                        'parse_mode': 'Markdown'
                    })
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    update_task_status(chat_id, message_id, '–≤—ã–ø–æ–ª–Ω–µ–Ω–æ')
                    requests.post(f'{URL}/answerCallbackQuery', json={'callback_query_id': callback['id']})

                elif data_callback.startswith('reply_'):
                    original_message_id = int(data_callback.split('_')[1])

                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–ø–ª–∞–µ–º
                    requests.post(f'{URL}/sendMessage', json={
                        'chat_id': chat_id,
                        'text': '‚ö´ –¢–æ—á–∫–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞',
                        'reply_to_message_id': original_message_id,
                    })

                    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
                    requests.post(f'{URL}/answerCallbackQuery', json={
                        'callback_query_id': callback['id'],
                        'text': '–û—Ç–≤–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∑–∞–¥–∞—á–µ'
                    })

                elif data_callback.startswith('back_'):
                    original_message_id = int(data_callback.split('_')[1])

                    # –ú–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–ø–ª–∞–µ–º
                    requests.post(f'{URL}/sendMessage', json={
                        'chat_id': chat_id,
                        'text': '–í–æ–∑–≤—Ä–∞—Ç –∫ –∑–∞–¥–∞—á–µ:',
                        'reply_to_message_id': original_message_id
                    })

                # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –í–°–ï callback-–∑–∞–ø—Ä–æ—Å—ã
                requests.post(f'{URL}/answerCallbackQuery', json={
                    'callback_query_id': callback['id']
                })

    time.sleep(1)
