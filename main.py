import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import db
import time

TOKEN = '8081090023:AAHizaGHTAshsYhPi7dOePK_slGyPnxQDxU'
bot = telebot.TeleBot(TOKEN, parse_mode='Markdown')

# FSM-—Å–ª–æ–≤–∞—Ä—å
user_states = {}
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
db.create_tables()

# –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def status_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data="status_ne"))
    kb.add(InlineKeyboardButton("–í–∑—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É", callback_data="status_in"))
    kb.add(InlineKeyboardButton("–í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data="status_done"))
    return kb

def action_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data="in_progress"))
    kb.add(InlineKeyboardButton("–í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data="completed"))
    return kb

def back_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚óÄ –ù–∞–∑–∞–¥", callback_data="back_status"))
    return kb

# /start
@bot.message_handler(commands=['start'])
def cmd_start(m):
    bot.send_message(m.chat.id, "–ü—Ä–∏–≤–µ—Ç! –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/newtask\n/task\n/filter", message_thread_id=m.message_thread_id)

# /newtask
@bot.message_handler(commands=['newtask'])
def cmd_newtask(m):
    user_states[m.from_user.id] = 'await_text'
    bot.send_message(
        m.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:",
        message_thread_id=m.message_thread_id
    )

@bot.message_handler(func=lambda m: user_states.get(m.from_user.id) == 'await_text', content_types=['text'])
def handle_newtask_text(m):
    text   = m.text
    author = m.from_user.first_name or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    cid    = m.chat.id
    tid    = m.message_thread_id

    msg = bot.send_message(
        cid,
        f"*–ó–∞–¥–∞—á–∞:*\n{text}\n*–ü–æ—Å—Ç–∞–≤–∏–ª:* {author}\n*–°—Ç–∞—Ç—É—Å:* ‚ùó –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ",
        reply_markup=action_kb(),
        message_thread_id=tid
    )
    db.add_task(cid, tid, msg.message_id, author, text, '–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ')
    user_states.pop(m.from_user.id, None)

# /task
@bot.message_handler(commands=['task'])
def cmd_task(m):
    cid = m.chat.id
    tid = m.message_thread_id
    mids = db.get_all_tasks(cid, tid)
    if not mids:
        bot.send_message(cid, "–ù–µ—Ç –∑–∞–¥–∞—á –≤ —ç—Ç–æ–π —Ç–µ–º–µ.", message_thread_id=tid)
        return
    for mid in mids:
        txt, status = db.get_task_by_id(cid, mid)
        bot.send_message(
            cid,
            f"{txt}\n\n–°—Ç–∞—Ç—É—Å: {status}",
            reply_to_message_id=mid,
            message_thread_id=tid,
            parse_mode='Markdown'
        )

# /filter
@bot.message_handler(commands=['filter'])
def cmd_filter(m):
    bot.send_message(
        m.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å:",
        reply_markup=status_kb(),
        message_thread_id=m.message_thread_id
    )

# inline-callback
@bot.callback_query_handler(func=lambda cb: True)
def cb_handler(cb):
    cid = cb.message.chat.id
    tid = cb.message.message_thread_id
    data = cb.data

    # —Å–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ ‚Äî –≤–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É
    if data == 'in_progress':
        new = cb.message.text.replace('–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ', '–í–∑—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É ‚úÖ')
        bot.edit_message_text(
            new,
            cid,
            cb.message.message_id,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data="completed")
            ]])
        )
        db.update_task_status(cid, cb.message.message_id, '–≤–∑—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É')
        bot.answer_callback_query(cb.id)
        return

    # —Å–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ ‚Äî –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
    if data == 'completed':
        new = (cb.message.text
                 .replace('–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ', '–í—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ')
                 .replace('–í–∑—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É ‚úÖ', '–í—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ'))
        bot.edit_message_text(
            new,
            cid,
            cb.message.message_id,
            parse_mode='Markdown'
        )
        db.update_task_status(cid, cb.message.message_id, '–≤—ã–ø–æ–ª–Ω–µ–Ω–æ')
        bot.answer_callback_query(cb.id)
        return

    # —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if data.startswith('status_'):
        status_map = {
            'status_ne':   '–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ',
            'status_in':   '–≤–∑—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É',
            'status_done': '–≤—ã–ø–æ–ª–Ω–µ–Ω–æ',
        }
        st = status_map[data]
        mids = db.get_tasks_by_status(cid, tid, st)

        if not mids:
            bot.edit_message_text(
                f"‚ùå –ù–µ—Ç –∑–∞–¥–∞—á ¬´{st}¬ª.",
                cid,
                cb.message.message_id,
                reply_markup=back_kb()
            )
        else:
            kb = InlineKeyboardMarkup()
            for mid in mids:
                txt, _ = db.get_task_by_id(cid, mid)
                label = txt[:25] + '‚Ä¶' if len(txt) > 25 else txt
                kb.add(InlineKeyboardButton(label, callback_data=f"task_{mid}_{data}"))
            kb.add(InlineKeyboardButton("‚óÄ –ù–∞–∑–∞–¥", callback_data="back_status"))

            bot.edit_message_text(
                f"üìã –ó–∞–¥–∞—á–∏ ¬´{st}¬ª:",
                cid,
                cb.message.message_id,
                reply_markup=kb
            )
        bot.answer_callback_query(cb.id)
        return

    # –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∞—Ç—É—Å–∞
    if data == 'back_status':
        bot.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å:",
            cid,
            cb.message.message_id,
            reply_markup=status_kb()
        )
        bot.answer_callback_query(cb.id)
        return

    # –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
    if data.startswith('task_'):
        _, mid_s, data_st = data.split('_', 2)
        mid = int(mid_s)
        st_map = {
            'status_ne':   '–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ',
            'status_in':   '–≤–∑—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É',
            'status_done': '–≤—ã–ø–æ–ª–Ω–µ–Ω–æ',
        }
        st = st_map[data_st]
        rec = db.get_task_by_id(cid, mid)
        if rec:
            txt, _ = rec
            bot.send_message(
                cid,
                f"üîç –ó–∞–¥–∞—á–∞:\n\n{txt}\n\n–°—Ç–∞—Ç—É—Å: {st}",
                reply_to_message_id=mid,
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚óÄ –ù–∞–∑–∞–¥", callback_data=data_st)
                ]]),
                message_thread_id=tid,
                parse_mode='Markdown'
            )
        else:
            bot.send_message(cid, "‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", message_thread_id=tid)
        bot.answer_callback_query(cb.id)
        return

    # –≤–æ –≤—Å–µ—Ö –ø—Ä–æ—á–∏—Ö —Å–ª—É—á–∞—è—Ö
    bot.answer_callback_query(cb.id)

if __name__ == '__main__':
    bot.remove_webhook()  
    time.sleep(1) 
    bot.infinity_polling(timeout=10, long_polling_timeout=5)
