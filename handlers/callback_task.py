import logging
from telebot.types import CallbackQuery
from telebot.apihelper import ApiTelegramException
from db import repository as db
from utils import throttling_decorator

logger = logging.getLogger(__name__)

def register(bot):
    @throttling_decorator
    @bot.callback_query_handler(lambda cb: cb.data.startswith('task|'))
    def cb_task(cb: CallbackQuery):
        try:
            # –†–∞–∑–±–æ—Ä callback_data: task|<message_id>|<status_key>|<thread_id>
            _, mid_s, status_key, tid_s = cb.data.split('|', 3)
            mid = int(mid_s)
            tid = None if tid_s == 'None' else int(tid_s)
            cid = cb.message.chat.id
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ callback task")
            return bot.answer_callback_query(cb.id, "‚ùó –û—à–∏–±–∫–∞ –∫–Ω–æ–ø–∫–∏", show_alert=True)

        # –ë–µ—Ä—ë–º —Å—Ç—Ä–æ–∫—É –∑–∞–¥–∞—á–∏ –∏–∑ –ë–î
        try:
            row = db.get_task_by_id(cid, tid, mid)
            if not row:
                raise LookupError("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î")
            _, text, _, _ = row
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø–æ message_id")
            return bot.answer_callback_query(cb.id, "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–¥–∞—á—É", show_alert=True)

        # –ü—Ä–µ—Ñ–∏–∫—Å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        prefix = {
            'ne': '‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞',
            'accepted': '‚úÖ –ü—Ä–∏–Ω—è—Ç–∞—è –∑–∞–¥–∞—á–∞'
        }.get(status_key, 'üìå –ó–∞–¥–∞—á–∞')

        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç (reply) —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        # –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —É–∂–µ –Ω–µ—Ç, –ø–æ–π–º–∞–µ–º ApiTelegramException.
        try:
            bot.send_message(
                cid,
                f"{prefix}: {text}",
                reply_to_message_id=mid,
                message_thread_id=tid
            )
        except ApiTelegramException as e:
            # Telegram –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç error_code=400 –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–∞ "Bad Request: message to be replied not found"
            desc = getattr(e, 'result_json', {}).get('description', '') or ''
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –ø–æ–¥—Å—Ç—Ä–æ–∫–µ "reply message not found"
            if e.error_code == 400 and 'message to be replied not found' in desc:
                # –ò—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Ç ‚Äî —É–¥–∞–ª—è–µ–º —Ç–∞—Å–∫ –∏–∑ –ë–î –∏ —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                try:
                    db.delete_task(cid, tid, mid)
                    logger.info(f"callback_task: —É–¥–∞–ª–µ–Ω–∞ –±–∏—Ç–∞—è –∑–∞–¥–∞—á–∞ mid={mid} –≤ chat={cid}, thread={tid}")
                except Exception:
                    logger.exception("callback_task: –æ—à–∏–±–∫–∞ –ø—Ä–∏ delete_task")
                return bot.answer_callback_query(
                    cb.id,
                    "‚ùó –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π —É–¥–∞–ª–µ–Ω–æ, –∑–∞–¥–∞—á–∞ —É–±—Ä–∞–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.",
                    show_alert=True
                )
            else:
                # –ï—Å–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏ —Å–æ–æ–±—â–∞–µ–º generic-—Å–æ–æ–±—â–µ–Ω–∏–µ
                logger.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–∞—á–µ–π")
                return bot.answer_callback_query(
                    cb.id,
                    "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–¥–∞—á–∏.",
                    show_alert=True
                )

        # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ reply –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –ø—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º callback
        try:
            bot.answer_callback_query(cb.id)
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –≤ answer_callback_query")