import logging
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from db import repository as db
from keyboards import status_kb, list_kb

logger = logging.getLogger(__name__)

def register(bot):

    @bot.callback_query_handler(lambda cb: cb.data.startswith('send_all|'))
    def cb_send_all(cb):
        try:
            _, status_key, tid_s = cb.data.split('|', 2)
            tid = None if tid_s == 'None' else int(tid_s)
            cid = cb.message.chat.id
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ send_all")
            return bot.answer_callback_query(cb.id, "‚ùó –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞", show_alert=True)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á
        try:
            human = {'ne': '–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ', 'accepted': '–ø—Ä–∏–Ω—è—Ç–æ'}[status_key]
            mids = db.get_tasks_by_status(cid, tid, human)
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á")
            return bot.answer_callback_query(cb.id, "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏", show_alert=True)

        if not mids:
            return bot.answer_callback_query(cb.id, "–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")

        sent = 0
        for mid in mids:
            try:
                _, text, _, _ = db.get_task_by_id(cid, tid, mid)
                msg = f"‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {text}" if status_key == 'ne' else f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: {text}"
                bot.send_message(cid, msg, reply_to_message_id=mid, message_thread_id=tid)
                sent += 1
            except Exception:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–¥–∞—á–∏ {mid}", exc_info=True)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: —É–¥–∞–ª—è–µ–º ¬´–ü—Ä–∏—Å–ª–∞—Ç—å –≤—Å–µ¬ª
        try:
            kb = list_kb(cid, mids, status_key, tid)
            bot.edit_message_reply_markup(
                chat_id=cid,
                message_id=cb.message.message_id,
                reply_markup=kb
            )
        except Exception:
            logger.warning("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ—Å–ª–µ send_all", exc_info=True)

        bot.answer_callback_query(cb.id, f"üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}")

    @bot.callback_query_handler(lambda cb: cb.data.startswith('back_status|'))
    def cb_back_status(cb):
        try:
            _, tid_s = cb.data.split('|', 1)
            tid = None if tid_s == 'None' else int(tid_s)
            cid = cb.message.chat.id
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ back_status")
            return bot.answer_callback_query(cb.id, "‚ùó –û—à–∏–±–∫–∞ –∫–Ω–æ–ø–∫–∏", show_alert=True)

        try:
            kb = status_kb(tid)
            bot.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å:",
                chat_id=cid,
                message_id=cb.message.message_id,
                reply_markup=kb
            )
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å—Ç–∞—Ç—É—Å–∞–º")
        finally:
            bot.answer_callback_query(cb.id)