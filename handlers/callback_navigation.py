import logging
import time
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from db import repository as db
import re
from keyboards import status_kb, list_kb
from utils import throttling_decorator

logger = logging.getLogger(__name__)

def register(bot):
    BATCH_SIZE = 4           # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞—Ç—á–µ
    SHORT_SLEEP = 0.35       # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    LONG_SLEEP = 0.5         # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
    MAX_SPAM_SLEEP = 5  # 5 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º

    def chunks(lst, n):
        for i in range(0, len(lst), n):
            yield lst[i:i + n]

    @bot.callback_query_handler(lambda cb: cb.data.startswith('send_all|'))
    def cb_send_all(cb):
        try:
            _, status_key, tid_s = cb.data.split('|', 2)
            tid = None if tid_s == 'None' else int(tid_s)
            cid = cb.message.chat.id
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ send_all")
            return bot.answer_callback_query(cb.id, "‚ùó –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞", show_alert=True)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á
        try:
            human = {'ne': '–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ', 'accepted': '–ø—Ä–∏–Ω—è—Ç–æ'}[status_key]
            mids = db.get_tasks_by_status(cid, tid, human)
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á")
            return bot.answer_callback_query(cb.id, "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏", show_alert=True)

        if not mids:
            return bot.answer_callback_query(cb.id, "–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")

        # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–∏—Å–ª–∞—Ç—å –≤—Å–µ¬ª
        try:
            kb = list_kb(cid, mids, status_key, tid, show_send_all=False)
            bot.edit_message_reply_markup(
                chat_id=cid,
                message_id=cb.message.message_id,
                reply_markup=kb
            )
        except Exception:
            logger.warning("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ send_all", exc_info=True)

        sent = 0
        for batch in chunks(mids, BATCH_SIZE):
            for mid in batch:
                try:
                    _, text, _, _ = db.get_task_by_id(cid, tid, mid)
                    msg = f"‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {text}" if status_key == 'ne' else f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: {text}"
                    bot.send_message(cid, msg, reply_to_message_id=mid, message_thread_id=tid)
                    sent += 1
                    time.sleep(SHORT_SLEEP)
                except Exception as e:
                    desc = getattr(e, 'result_json', {}).get('description', '')
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
                    if hasattr(e, 'error_code') and e.error_code == 429:
                        retry_after = 1
                        m = re.search(r'retry after (\d+)', desc)
                        if m:
                            retry_after = int(m.group(1))
                        if retry_after > MAX_SPAM_SLEEP:
                            bot.send_message(cid, "‚ùó –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ.", message_thread_id=tid)
                            logger.warning(f"–õ–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–ø–∞—Ç—å {retry_after}s ‚Äî –æ—Ç–º–µ–Ω–∞ send_all")
                            bot.answer_callback_query(cb.id, f"üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}")
                            return
                        else:
                            time.sleep(retry_after)
                            try:
                                bot.send_message(cid, msg, reply_to_message_id=mid, message_thread_id=tid)
                                sent += 1
                            except Exception as e2:
                                logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É {mid}: {e2}")
                    else:
                        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–¥–∞—á–∏ {mid}: {e}")
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
            if batch != mids[-BATCH_SIZE:]:
                time.sleep(LONG_SLEEP)

        bot.answer_callback_query(cb.id, f"üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}")

    @throttling_decorator
    @bot.callback_query_handler(lambda cb: cb.data.startswith('back_status|'))
    def cb_back_status(cb):
        try:
            _, tid_s = cb.data.split('|', 1)
            tid = None if tid_s == 'None' else int(tid_s)
            cid = cb.message.chat.id
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ back_status")
            return bot.answer_callback_query(cb.id, "‚ùó –û—à–∏–±–∫–∞ –∫–Ω–æ–ø–∫–∏", show_alert=True)

        try:
            kb = status_kb(tid)
            bot.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å:",
                chat_id=cid,
                message_id=cb.message.message_id,
                reply_markup=kb
            )
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å—Ç–∞—Ç—É—Å–∞–º")
        finally:
            bot.answer_callback_query(cb.id)